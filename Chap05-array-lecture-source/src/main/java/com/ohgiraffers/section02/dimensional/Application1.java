package com.ohgiraffers.section02.dimensional;

public class Application1 {

    public static void main(String[] args) {

        /* 수업목표. 다차원 배열의 구조를 이해하고 사용할 수 있다. */
        /* 필기.
         *  다차원 배열
         *  다차원 배열은 2차원 이상의 배열을 의미한다.
         *  배열의 인덱스마다 또 다른 배열의 주소를 보관하는 배열을 의미한다.
         *  즉, 2차원 배열은 1차원 배열 여러 개를 하나로 묶어서 관리하는 배열을 의미한다.
         *  더 많은 차원의 배열을 사용할 수 있지만 일반적으로 2차원 배열보다 더 높은 차원의 배열은 사용 빈도가 현저히 적다. (인지 범위 초과)
         *  */

        /* 필기.
         *  2차원 배열을 사용하는 방법
         *  1. 배열의 주소를 보관할 레퍼런스 변수 선언(stack)
         *  2. 여러 개의 1차원 배열의 주소를 관리하는 배열을 생성(heap)
         *  3. 각 인덱스에서 관리하는 배열을 할당(heap)하여 주소를 보관하는 배열에 저장
         *  4. 생성한 여러 개의 1차원 배열에 차례로 접근해서 사용
         * */

        /*목차. 1. 배열의 주소를 보관한 레퍼런스 변수 선언(stack)*/
        int[][] iarr1;
        int iarr2[][];
        int[] iarr3[];

        /*목차. 2.여러 개의 1차원 배열의 주소를 관리하는 배열을 생성(heap)*/
//        iarr1 = new int[][];      //배열의 길이를 지정하지 않아서 에러 발생
//        iarr1 = new int[][4];     //여러개의 배열의 주소를 관리할 1차(세로축) 배열의 길이를 지정하지 않아서 에러 발생
        iarr1 = new int[3][];       //1차 배열의 길이를 지정해주면 가능

        /*목차. 3. 각 인덱스에서 관리하는 배열을 할당(heap)하여 주소를 보관하는 배열에 저장*/
        iarr1[0] = new int[5];       //new가 세로줄을 결정하고 new int[]안에 들어있던 수 만큼 가로줄 갯수 생성
        iarr1[1] = new int[5];       //new int[]내부의 숫자가 다 다르다면 가변배열
        iarr1[2] = new int[5];

        /* 설명.
         *  참고 : 위에서 진행한 2,3번을 동시에 진행할 수 도 있다.
         *  앞 부분 정수는 주소를 관리하는 배열의 크기, 뒷 부분 정수는 각 인덱스에 할당하는 배열의 길이이다.
         *  관리하는 여러 개의 배열의 길이가 동일한 경우 아래와 같이 한 번에 할당할 수 도 있다.
         *  하지만 여러 개의 배열의 길이가 각각 다른 경우에는 위에서 했던 방식처럼 인덱스별로 배열을 따로 할당해 주어야 한다.
         *  서로 같은 길이의 여러 개 배열을 하나로 묶어 관리하는 2차원 배열을 정변배열 이라고 하며,
         *  서로 길이가 같지 않은 여러 개의 배열을 하나로 묶어 관리하는 2차원 배열을 가변배열 이라고 한다.
         * */
        iarr2 = new int[3][5];      // 목차2왈 3을 한줄로 표현한 것. 3*5사이즈의 표 생성. 정변배열

        /*목차. 4. 생성한 여러 개의 1차원 배열에 차례로 접근해서 사용*/
        for (int i = 0; i < iarr2.length; i++) {        //i는 0부터 3(iarr2.length가 앞쪽[]이므로 길이는 3이다.)까지

            for(int j = 0; j < iarr2[i].length; j++) {      //iarr2[i].length가 5다. iarr2[i]에 바로 뒷줄의 i를 가져다대면 된다.

                System.out.println("iarr2[" + i + "][" + j + "]" +" = " + iarr2[i][j]);

            }
        }

        /* 설명. 0번 인덱스의 배열 값 출력 */
        for(int i = 0; i < iarr1[0].length; i++) {
            System.out.print(iarr1[0][i] + " ");
        }
        System.out.println();

        /* 설명. 1번 인덱스의 배열 값 출력 */
        for(int i = 0; i < iarr1[1].length; i++) {
            System.out.print(iarr1[1][i] + " ");
        }
        System.out.println();

        /* 설명. 2번 인덱스의 배열 값 출력 */
        for(int i = 0; i < iarr1[2].length; i++) {
            System.out.print(iarr1[2][i] + " ");
        }
        System.out.println();

    }
}
